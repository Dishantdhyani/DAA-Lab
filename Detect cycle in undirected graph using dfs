//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  private:
  
  bool detect(int node,int parent,unordered_map<int,list<int>> &adj,int visited[]){
      visited[node] = true;
      
      for(auto it : adj[node]){
        if(!visited[it]){
            if(detect(it,node,adj,visited))
                return true;
        }    
        else if(it != parent){
            return true;
        }
      }
      
      return false;
  }
  
  public:
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        
        unordered_map<int,list<int>>adj;
        for(int i=0;i<edges.size();i++){
            int u = edges[i][0];
            int v = edges[i][1];
            
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        int visited[V] = {0};
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(detect(i,-1,adj,visited)) 
                    return true;
            }
        }
        
        return false;
    }
};



//{ Driver Code Starts.

int main() {
    int tc;
    cin >> tc;
    cin.ignore();
    while (tc--) {
        int V, E;
        cin >> V >> E;
        cin.ignore();
        vector<vector<int>> edges;
        for (int i = 1; i <= E; i++) {
            int u, v;
            cin >> u >> v;
            edges.push_back({u, v});
        }

        Solution obj;
        bool ans = obj.isCycle(V, edges);
        if (ans)
            cout << "true\n";
        else
            cout << "false\n";

        cout << "~"
             << "\n";
    }
    return 0;
}

// } Driver Code Ends
